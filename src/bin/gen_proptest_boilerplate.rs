use auto_fuzz_test::FnVisitor;
use quote::quote;
use syn;
use syn::token::{Async, Unsafe};
use syn::visit::Visit;
use syn::{FnArg, FnDecl, Ident, Type};

/// Running this on an entire crate:
/// `cargo +nightly rustc --profile=check -- -Z unpretty=hir | gen_proptest_boilerplate`
/// This dumps all autogenerated fuzz harnesses, currently with no separators.
/// TODO: write them out to separate files and wrap this thing into a cargo subcommand
fn main() {
    let code = quote! {
        pub fn f(a: String) {}
        pub fn g(b: String, c: bool) {}
        impl String {
            fn h(&self, d: u8) {}
            fn i(self, e: u8) {}
        }
    };

    let syntax_tree: syn::File =
        syn::parse2(code).expect("Failed to parse input. Is it Rust code?");
    // function print_a_test doesn't care about some of the parameters, so we throw them away here
    let callback = |this: Option<&Type>,
                    ident: &Ident,
                    decl: &FnDecl,
                    _unsafety: &Option<Unsafe>,
                    _asyncness: &Option<Async>,
                    _: &()| {
        print_a_test(this, ident, decl);
    };
    FnVisitor {
        callback: Box::new(callback),
        context: (),
    }
    .visit_file(&syntax_tree);
}

fn print_a_test(this: Option<&Type>, ident: &Ident, decl: &FnDecl) {
    print!("proptest! {{ #[test] fn test_{}_fuzz (", ident);
    if let Some(self_type) = &this {
        let self_type = format!("{}", quote!(#self_type));
        print!("self_like_thing: Any::<{}>(), ", self_type);
    }
    for a in &decl.inputs {
        if let FnArg::Captured(a) = a {
            let pat = &a.pat;
            let ty = &a.ty;
            print!("{}: Any::<{}>(), ", quote!(#pat), quote!(#ty));
        }
    }
    print!(") {{");
    if this.is_some() {
        print!("self_like_thing.");
    }
    print!("{} (", ident);
    for a in &decl.inputs {
        if let FnArg::Captured(a) = a {
            let pat = &a.pat;
            print!("{}, ", quote!(#pat));
        }
    }
    println!(")}}}}");
}
